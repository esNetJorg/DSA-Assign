syntax = "proto3";

package car_rental;

// Car status enumeration
enum CarStatus {
    AVAILABLE = 0;
    UNAVAILABLE = 1;
    RENTED = 2;
}

// User role enumeration
enum UserRole {
    CUSTOMER = 0;
    ADMIN = 1;
}

// Car message definition
message Car {
    string plate = 1;           // Unique identifier (number plate)
    string make = 2;
    string model = 3;
    int32 year = 4;
    double daily_price = 5;
    int32 mileage = 6;
    CarStatus status = 7;
    string created_at = 8;      // Additional field for tracking
}

// User message definition
message User {
    string user_id = 1;
    string name = 2;
    string email = 3;
    UserRole role = 4;
    string created_at = 5;
}

// Cart item for rental dates
message CartItem {
    string plate = 1;
    string start_date = 2;      // Format: YYYY-MM-DD
    string end_date = 3;        // Format: YYYY-MM-DD
    double estimated_price = 4;
}

// Reservation details
message Reservation {
    string reservation_id = 1;
    string customer_id = 2;
    string plate = 3;
    string start_date = 4;
    string end_date = 5;
    double total_price = 6;
    string status = 7;          // CONFIRMED, CANCELLED, COMPLETED
    string created_at = 8;
}

// Request messages
message AddCarRequest {
    string make = 1;
    string model = 2;
    int32 year = 3;
    double daily_price = 4;
    int32 mileage = 5;
    string plate = 6;
    CarStatus status = 7;
}

message AddCarResponse {
    bool success = 1;
    string message = 2;
    string car_id = 3;          // Returns the plate as ID
}

message CreateUsersRequest {
    repeated User users = 1;
}

message CreateUsersResponse {
    bool success = 1;
    string message = 2;
    int32 users_created = 3;
}

message UpdateCarRequest {
    string plate = 1;
    optional string make = 2;
    optional string model = 3;
    optional int32 year = 4;
    optional double daily_price = 5;
    optional int32 mileage = 6;
    optional CarStatus status = 7;
}

message UpdateCarResponse {
    bool success = 1;
    string message = 2;
    Car updated_car = 3;
}

message RemoveCarRequest {
    string plate = 1;
}

message RemoveCarResponse {
    bool success = 1;
    string message = 2;
    repeated Car remaining_cars = 3;
}

message ListAvailableCarsRequest {
    optional string filter_text = 1;    // Filter by make, model, or year
    optional int32 year_filter = 2;
}

message SearchCarRequest {
    string plate = 1;
}

message SearchCarResponse {
    bool found = 1;
    Car car = 2;
    string message = 3;
}

message AddToCartRequest {
    string customer_id = 1;
    string plate = 2;
    string start_date = 3;
    string end_date = 4;
}

message AddToCartResponse {
    bool success = 1;
    string message = 2;
    CartItem cart_item = 3;
}

message PlaceReservationRequest {
    string customer_id = 1;
}

message PlaceReservationResponse {
    bool success = 1;
    string message = 2;
    repeated Reservation reservations = 3;
    double total_amount = 4;
}

message ListReservationsRequest {
    optional string customer_id = 1;    // If provided, filter by customer
}

message Empty {}

// Service definition
service CarRentalService {
    // Admin operations
    rpc AddCar(AddCarRequest) returns (AddCarResponse);
    rpc CreateUsers(CreateUsersRequest) returns (CreateUsersResponse);
    rpc UpdateCar(UpdateCarRequest) returns (UpdateCarResponse);
    rpc RemoveCar(RemoveCarRequest) returns (RemoveCarResponse);
    rpc ListReservations(ListReservationsRequest) returns (stream Reservation);
    
    // Customer operations
    rpc ListAvailableCars(ListAvailableCarsRequest) returns (stream Car);
    rpc SearchCar(SearchCarRequest) returns (SearchCarResponse);
    rpc AddToCart(AddToCartRequest) returns (AddToCartResponse);
    rpc PlaceReservation(PlaceReservationRequest) returns (PlaceReservationResponse);
}